//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;
using Demo.Data;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(DemoDataContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsf18f03ca5d028b0b8fe817aa93accb6d4f33751f2459bb1b65ad07a038d7da40))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsf18f03ca5d028b0b8fe817aa93accb6d4f33751f2459bb1b65ad07a038d7da40 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "f18f03ca5d028b0b8fe817aa93accb6d4f33751f2459bb1b65ad07a038d7da40"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Designation")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.EmployeeLanguages")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Employee")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Language")
            {
                return GetView3();
            }

            if (extentName == "DemoDataContext.Designations")
            {
                return GetView4();
            }

            if (extentName == "DemoDataContext.EmployeeLanguages")
            {
                return GetView5();
            }

            if (extentName == "DemoDataContext.Employees")
            {
                return GetView6();
            }

            if (extentName == "DemoDataContext.Languages")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.UserDetail")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.IdentityUser")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserClaim")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserLogin")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserRole")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.IdentityRole")
            {
                return GetView13();
            }

            if (extentName == "DemoDataContext.UserDetails")
            {
                return GetView14();
            }

            if (extentName == "DemoDataContext.IdentityUsers")
            {
                return GetView15();
            }

            if (extentName == "DemoDataContext.AppUser_UserDetail")
            {
                return GetView16();
            }

            if (extentName == "DemoDataContext.IdentityUserClaims")
            {
                return GetView17();
            }

            if (extentName == "DemoDataContext.IdentityUser_Claims")
            {
                return GetView18();
            }

            if (extentName == "DemoDataContext.IdentityUserLogins")
            {
                return GetView19();
            }

            if (extentName == "DemoDataContext.IdentityUser_Logins")
            {
                return GetView20();
            }

            if (extentName == "DemoDataContext.IdentityUserRoles")
            {
                return GetView21();
            }

            if (extentName == "DemoDataContext.IdentityUser_Roles")
            {
                return GetView22();
            }

            if (extentName == "DemoDataContext.IdentityRole_Users")
            {
                return GetView23();
            }

            if (extentName == "DemoDataContext.IdentityRoles")
            {
                return GetView24();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Designation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Designation
        [CodeFirstDatabaseSchema.Designation](T1.Designation_Id, T1.Designation_Name)
    FROM (
        SELECT 
            T.Id AS Designation_Id, 
            T.Name AS Designation_Name, 
            True AS _from0
        FROM DemoDataContext.Designations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.EmployeeLanguages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmployeeLanguages
        [CodeFirstDatabaseSchema.EmployeeLanguages](T1.EmployeeLanguages_Id, T1.EmployeeLanguages_EmployeeId, T1.EmployeeLanguages_LanguageId, T1.EmployeeLanguages_Fluency)
    FROM (
        SELECT 
            T.Id AS EmployeeLanguages_Id, 
            T.EmployeeId AS EmployeeLanguages_EmployeeId, 
            T.LanguageId AS EmployeeLanguages_LanguageId, 
            T.Fluency AS EmployeeLanguages_Fluency, 
            True AS _from0
        FROM DemoDataContext.EmployeeLanguages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Employee.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employee
        [CodeFirstDatabaseSchema.Employee](T1.Employee_EmployeeId, T1.Employee_FirstName, T1.Employee_LastName, T1.Employee_DesignationId, T1.Employee_DateOfBirth, T1.Employee_Salary, T1.Employee_Email, T1.Employee_Gender)
    FROM (
        SELECT 
            T.EmployeeId AS Employee_EmployeeId, 
            T.FirstName AS Employee_FirstName, 
            T.LastName AS Employee_LastName, 
            T.DesignationId AS Employee_DesignationId, 
            T.DateOfBirth AS Employee_DateOfBirth, 
            T.Salary AS Employee_Salary, 
            T.Email AS Employee_Email, 
            CAST(T.Gender AS [Edm.Int32]) AS Employee_Gender, 
            True AS _from0
        FROM DemoDataContext.Employees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Language.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Language
        [CodeFirstDatabaseSchema.Language](T1.Language_LanguageId, T1.Language_Name)
    FROM (
        SELECT 
            T.LanguageId AS Language_LanguageId, 
            T.Name AS Language_Name, 
            True AS _from0
        FROM DemoDataContext.Languages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.Designations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Designations
        [Demo.Data.Designation](T1.Designation_Id, T1.Designation_Name)
    FROM (
        SELECT 
            T.Id AS Designation_Id, 
            T.Name AS Designation_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Designation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.EmployeeLanguages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmployeeLanguages
        [Demo.Data.EmployeeLanguages](T1.EmployeeLanguages_Id, T1.EmployeeLanguages_EmployeeId, T1.EmployeeLanguages_LanguageId, T1.EmployeeLanguages_Fluency)
    FROM (
        SELECT 
            T.Id AS EmployeeLanguages_Id, 
            T.EmployeeId AS EmployeeLanguages_EmployeeId, 
            T.LanguageId AS EmployeeLanguages_LanguageId, 
            T.Fluency AS EmployeeLanguages_Fluency, 
            True AS _from0
        FROM CodeFirstDatabase.EmployeeLanguages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.Employees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [Demo.Data.Employee](T1.Employee_EmployeeId, T1.Employee_FirstName, T1.Employee_LastName, T1.Employee_DesignationId, T1.Employee_DateOfBirth, T1.Employee_Salary, T1.Employee_Email, T1.Employee_Gender)
    FROM (
        SELECT 
            T.EmployeeId AS Employee_EmployeeId, 
            T.FirstName AS Employee_FirstName, 
            T.LastName AS Employee_LastName, 
            T.DesignationId AS Employee_DesignationId, 
            T.DateOfBirth AS Employee_DateOfBirth, 
            T.Salary AS Employee_Salary, 
            T.Email AS Employee_Email, 
            CAST(T.Gender AS [Demo.Data.Gender]) AS Employee_Gender, 
            True AS _from0
        FROM CodeFirstDatabase.Employee AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.Languages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Languages
        [Demo.Data.Language](T1.Language_LanguageId, T1.Language_Name)
    FROM (
        SELECT 
            T.LanguageId AS Language_LanguageId, 
            T.Name AS Language_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Language AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserDetail.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserDetail
        [CodeFirstDatabaseSchema.UserDetail](T1.UserDetail_Id, T1.UserDetail_FirstName, T1.UserDetail_LastName, T1.UserDetail_Gender, T1.UserDetail_Email)
    FROM (
        SELECT 
            T.Id AS UserDetail_Id, 
            T.FirstName AS UserDetail_FirstName, 
            T.LastName AS UserDetail_LastName, 
            CAST(T.Gender AS [Edm.Int32]) AS UserDetail_Gender, 
            T.Email AS UserDetail_Email, 
            True AS _from0
        FROM DemoDataContext.UserDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUser
        [CodeFirstDatabaseSchema.IdentityUser](T4.IdentityUser_Id, T4.IdentityUser_Email, T4.IdentityUser_EmailConfirmed, T4.IdentityUser_PasswordHash, T4.IdentityUser_SecurityStamp, T4.IdentityUser_PhoneNumber, T4.IdentityUser_PhoneNumberConfirmed, T4.IdentityUser_TwoFactorEnabled, T4.IdentityUser_LockoutEndDateUtc, T4.IdentityUser_LockoutEnabled, T4.IdentityUser_AccessFailedCount, T4.IdentityUser_UserName, T4.IdentityUser_Discriminator, T4.[IdentityUser.UserDetail_Id])
    FROM (
        SELECT -- Constructing Discriminator
            T3.IdentityUser_Id, 
            T3.IdentityUser_Email, 
            T3.IdentityUser_EmailConfirmed, 
            T3.IdentityUser_PasswordHash, 
            T3.IdentityUser_SecurityStamp, 
            T3.IdentityUser_PhoneNumber, 
            T3.IdentityUser_PhoneNumberConfirmed, 
            T3.IdentityUser_TwoFactorEnabled, 
            T3.IdentityUser_LockoutEndDateUtc, 
            T3.IdentityUser_LockoutEnabled, 
            T3.IdentityUser_AccessFailedCount, 
            T3.IdentityUser_UserName, 
            CASE
                WHEN T3._from2 THEN N'AppUser'
                ELSE N'IdentityUser'
            END AS IdentityUser_Discriminator, 
            T3.[IdentityUser.UserDetail_Id]
        FROM (
            SELECT T1.IdentityUser_Id, T1.IdentityUser_Email, T1.IdentityUser_EmailConfirmed, T1.IdentityUser_PasswordHash, T1.IdentityUser_SecurityStamp, T1.IdentityUser_PhoneNumber, T1.IdentityUser_PhoneNumberConfirmed, T1.IdentityUser_TwoFactorEnabled, T1.IdentityUser_LockoutEndDateUtc, T1.IdentityUser_LockoutEnabled, T1.IdentityUser_AccessFailedCount, T1.IdentityUser_UserName, T2.[IdentityUser.UserDetail_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, T1._from2, T1._from3
            FROM  (
                SELECT 
                    T.Id AS IdentityUser_Id, 
                    T.Email AS IdentityUser_Email, 
                    T.EmailConfirmed AS IdentityUser_EmailConfirmed, 
                    T.PasswordHash AS IdentityUser_PasswordHash, 
                    T.SecurityStamp AS IdentityUser_SecurityStamp, 
                    T.PhoneNumber AS IdentityUser_PhoneNumber, 
                    T.PhoneNumberConfirmed AS IdentityUser_PhoneNumberConfirmed, 
                    T.TwoFactorEnabled AS IdentityUser_TwoFactorEnabled, 
                    T.LockoutEndDateUtc AS IdentityUser_LockoutEndDateUtc, 
                    T.LockoutEnabled AS IdentityUser_LockoutEnabled, 
                    T.AccessFailedCount AS IdentityUser_AccessFailedCount, 
                    T.UserName AS IdentityUser_UserName, 
                    True AS _from0, 
                    CASE WHEN T IS OF (ONLY [Demo.Data.AppUser]) THEN True ELSE False END AS _from2, 
                    CASE WHEN T IS OF (ONLY [Demo.Data.IdentityUser]) THEN True ELSE False END AS _from3
                FROM DemoDataContext.IdentityUsers AS T) AS T1
                LEFT OUTER JOIN (
                SELECT 
                    Key(T.AppUser_UserDetail_Source).Id AS IdentityUser_Id, 
                    Key(T.AppUser_UserDetail_Target).Id AS [IdentityUser.UserDetail_Id], 
                    True AS _from1
                FROM DemoDataContext.AppUser_UserDetail AS T) AS T2
                ON T1.IdentityUser_Id = T2.IdentityUser_Id
        ) AS T3
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaim
        [CodeFirstDatabaseSchema.IdentityUserClaim](T3.IdentityUserClaim_Id, T3.IdentityUserClaim_UserId, T3.IdentityUserClaim_ClaimType, T3.IdentityUserClaim_ClaimValue, T3.[IdentityUserClaim.IdentityUser_Id])
    FROM (
        SELECT T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue, T2.[IdentityUserClaim.IdentityUser_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS IdentityUserClaim_Id, 
                T.UserId AS IdentityUserClaim_UserId, 
                T.ClaimType AS IdentityUserClaim_ClaimType, 
                T.ClaimValue AS IdentityUserClaim_ClaimValue, 
                True AS _from0
            FROM DemoDataContext.IdentityUserClaims AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.IdentityUser_Claims_Target).Id AS IdentityUserClaim_Id, 
                Key(T.IdentityUser_Claims_Source).Id AS [IdentityUserClaim.IdentityUser_Id], 
                True AS _from1
            FROM DemoDataContext.IdentityUser_Claims AS T) AS T2
            ON T1.IdentityUserClaim_Id = T2.IdentityUserClaim_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserLogin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogin
        [CodeFirstDatabaseSchema.IdentityUserLogin](T3.IdentityUserLogin_UserId, T3.IdentityUserLogin_LoginProvider, T3.IdentityUserLogin_ProviderKey, T3.[IdentityUserLogin.IdentityUser_Id])
    FROM (
        SELECT T1.IdentityUserLogin_UserId, T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T2.[IdentityUserLogin.IdentityUser_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.UserId AS IdentityUserLogin_UserId, 
                T.LoginProvider AS IdentityUserLogin_LoginProvider, 
                T.ProviderKey AS IdentityUserLogin_ProviderKey, 
                True AS _from0
            FROM DemoDataContext.IdentityUserLogins AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.IdentityUser_Logins_Target).UserId AS IdentityUserLogin_UserId, 
                Key(T.IdentityUser_Logins_Source).Id AS [IdentityUserLogin.IdentityUser_Id], 
                True AS _from1
            FROM DemoDataContext.IdentityUser_Logins AS T) AS T2
            ON T1.IdentityUserLogin_UserId = T2.IdentityUserLogin_UserId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRole
        [CodeFirstDatabaseSchema.IdentityUserRole](T4.IdentityUserRole_UserId, T4.IdentityUserRole_RoleId, T4.[IdentityUserRole.IdentityUser_Id], T4.[IdentityUserRole.IdentityRole_Id])
    FROM (
        SELECT T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId, T3.[IdentityUserRole.IdentityUser_Id], T2.[IdentityUserRole.IdentityRole_Id], (T3._from0 AND T3._from0 IS NOT NULL) AS _from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, T1._from2
        FROM  (
            SELECT 
                T.UserId AS IdentityUserRole_UserId, 
                T.RoleId AS IdentityUserRole_RoleId, 
                True AS _from2
            FROM DemoDataContext.IdentityUserRoles AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.IdentityRole_Users_Target).UserId AS IdentityUserRole_UserId, 
                Key(T.IdentityRole_Users_Target).RoleId AS IdentityUserRole_RoleId, 
                Key(T.IdentityRole_Users_Source).Id AS [IdentityUserRole.IdentityRole_Id], 
                True AS _from1
            FROM DemoDataContext.IdentityRole_Users AS T) AS T2
            ON T1.IdentityUserRole_UserId = T2.IdentityUserRole_UserId AND T1.IdentityUserRole_RoleId = T2.IdentityUserRole_RoleId
            LEFT OUTER JOIN (
            SELECT 
                Key(T.IdentityUser_Roles_Target).UserId AS IdentityUserRole_UserId, 
                Key(T.IdentityUser_Roles_Target).RoleId AS IdentityUserRole_RoleId, 
                Key(T.IdentityUser_Roles_Source).Id AS [IdentityUserRole.IdentityUser_Id], 
                True AS _from0
            FROM DemoDataContext.IdentityUser_Roles AS T) AS T3
            ON T1.IdentityUserRole_UserId = T3.IdentityUserRole_UserId AND T1.IdentityUserRole_RoleId = T3.IdentityUserRole_RoleId
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRole
        [CodeFirstDatabaseSchema.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM DemoDataContext.IdentityRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.UserDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserDetails
        [Demo.Data.UserDetail](T1.UserDetail_Id, T1.UserDetail_FirstName, T1.UserDetail_LastName, T1.UserDetail_Gender, T1.UserDetail_Email)
    FROM (
        SELECT 
            T.Id AS UserDetail_Id, 
            T.FirstName AS UserDetail_FirstName, 
            T.LastName AS UserDetail_LastName, 
            CAST(T.Gender AS [Demo.Data.Gender]) AS UserDetail_Gender, 
            T.Email AS UserDetail_Email, 
            True AS _from0
        FROM CodeFirstDatabase.UserDetail AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.IdentityUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUsers
        CASE
            WHEN T1._from2 THEN [Demo.Data.IdentityUser](T1.IdentityUser_Id, T1.IdentityUser_Email, T1.IdentityUser_EmailConfirmed, T1.IdentityUser_PasswordHash, T1.IdentityUser_SecurityStamp, T1.IdentityUser_PhoneNumber, T1.IdentityUser_PhoneNumberConfirmed, T1.IdentityUser_TwoFactorEnabled, T1.IdentityUser_LockoutEndDateUtc, T1.IdentityUser_LockoutEnabled, T1.IdentityUser_AccessFailedCount, T1.IdentityUser_UserName)
            ELSE [Demo.Data.AppUser](T1.IdentityUser_Id, T1.IdentityUser_Email, T1.IdentityUser_EmailConfirmed, T1.IdentityUser_PasswordHash, T1.IdentityUser_SecurityStamp, T1.IdentityUser_PhoneNumber, T1.IdentityUser_PhoneNumberConfirmed, T1.IdentityUser_TwoFactorEnabled, T1.IdentityUser_LockoutEndDateUtc, T1.IdentityUser_LockoutEnabled, T1.IdentityUser_AccessFailedCount, T1.IdentityUser_UserName) WITH 
                RELATIONSHIP(CREATEREF(DemoDataContext.UserDetails, ROW(T1.[AppUser_UserDetail.AppUser_UserDetail_Target.Id]),[Demo.Data.UserDetail]),[Demo.Data.AppUser_UserDetail],AppUser_UserDetail_Source,AppUser_UserDetail_Target) 
        END
    FROM (
        SELECT 
            T.Id AS IdentityUser_Id, 
            T.Email AS IdentityUser_Email, 
            T.EmailConfirmed AS IdentityUser_EmailConfirmed, 
            T.PasswordHash AS IdentityUser_PasswordHash, 
            T.SecurityStamp AS IdentityUser_SecurityStamp, 
            T.PhoneNumber AS IdentityUser_PhoneNumber, 
            T.PhoneNumberConfirmed AS IdentityUser_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS IdentityUser_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS IdentityUser_LockoutEndDateUtc, 
            T.LockoutEnabled AS IdentityUser_LockoutEnabled, 
            T.AccessFailedCount AS IdentityUser_AccessFailedCount, 
            T.UserName AS IdentityUser_UserName, 
            True AS _from0, 
            CASE WHEN T.Discriminator = N'AppUser' THEN True ELSE False END AS _from1, 
            CASE WHEN T.Discriminator = N'IdentityUser' THEN True ELSE False END AS _from2, 
            T.UserDetail_Id AS [AppUser_UserDetail.AppUser_UserDetail_Target.Id]
        FROM CodeFirstDatabase.IdentityUser AS T
        WHERE T.Discriminator IN {N'AppUser', N'IdentityUser'}
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.AppUser_UserDetail.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AppUser_UserDetail
        [Demo.Data.AppUser_UserDetail](T3.[AppUser_UserDetail.AppUser_UserDetail_Source], T3.[AppUser_UserDetail.AppUser_UserDetail_Target])
    FROM (
        SELECT -- Constructing AppUser_UserDetail_Source
            CreateRef(DemoDataContext.IdentityUsers, row(T2.[AppUser_UserDetail.AppUser_UserDetail_Source.Id]), [Demo.Data.AppUser]) AS [AppUser_UserDetail.AppUser_UserDetail_Source], 
            T2.[AppUser_UserDetail.AppUser_UserDetail_Target]
        FROM (
            SELECT -- Constructing AppUser_UserDetail_Target
                T1.[AppUser_UserDetail.AppUser_UserDetail_Source.Id], 
                CreateRef(DemoDataContext.UserDetails, row(T1.[AppUser_UserDetail.AppUser_UserDetail_Target.Id]), [Demo.Data.UserDetail]) AS [AppUser_UserDetail.AppUser_UserDetail_Target]
            FROM (
                SELECT 
                    T.Id AS [AppUser_UserDetail.AppUser_UserDetail_Source.Id], 
                    T.UserDetail_Id AS [AppUser_UserDetail.AppUser_UserDetail_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUser AS T
                WHERE T.UserDetail_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.IdentityUserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaims
        [Demo.Data.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue) WITH 
        RELATIONSHIP(CREATEREF(DemoDataContext.IdentityUsers, ROW(T1.[IdentityUser_Claims.IdentityUser_Claims_Source.Id]),[Demo.Data.IdentityUser]),[Demo.Data.IdentityUser_Claims],IdentityUser_Claims_Target,IdentityUser_Claims_Source) 
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0, 
            T.IdentityUser_Id AS [IdentityUser_Claims.IdentityUser_Claims_Source.Id]
        FROM CodeFirstDatabase.IdentityUserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.IdentityUser_Claims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUser_Claims
        [Demo.Data.IdentityUser_Claims](T3.[IdentityUser_Claims.IdentityUser_Claims_Source], T3.[IdentityUser_Claims.IdentityUser_Claims_Target])
    FROM (
        SELECT -- Constructing IdentityUser_Claims_Source
            CreateRef(DemoDataContext.IdentityUsers, row(T2.[IdentityUser_Claims.IdentityUser_Claims_Source.Id]), [Demo.Data.IdentityUser]) AS [IdentityUser_Claims.IdentityUser_Claims_Source], 
            T2.[IdentityUser_Claims.IdentityUser_Claims_Target]
        FROM (
            SELECT -- Constructing IdentityUser_Claims_Target
                T1.[IdentityUser_Claims.IdentityUser_Claims_Source.Id], 
                CreateRef(DemoDataContext.IdentityUserClaims, row(T1.[IdentityUser_Claims.IdentityUser_Claims_Target.Id]), [Demo.Data.IdentityUserClaim]) AS [IdentityUser_Claims.IdentityUser_Claims_Target]
            FROM (
                SELECT 
                    T.IdentityUser_Id AS [IdentityUser_Claims.IdentityUser_Claims_Source.Id], 
                    T.Id AS [IdentityUser_Claims.IdentityUser_Claims_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserClaim AS T
                WHERE T.IdentityUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.IdentityUserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogins
        [Demo.Data.IdentityUserLogin](T1.IdentityUserLogin_UserId, T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey) WITH 
        RELATIONSHIP(CREATEREF(DemoDataContext.IdentityUsers, ROW(T1.[IdentityUser_Logins.IdentityUser_Logins_Source.Id]),[Demo.Data.IdentityUser]),[Demo.Data.IdentityUser_Logins],IdentityUser_Logins_Target,IdentityUser_Logins_Source) 
    FROM (
        SELECT 
            T.UserId AS IdentityUserLogin_UserId, 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            True AS _from0, 
            T.IdentityUser_Id AS [IdentityUser_Logins.IdentityUser_Logins_Source.Id]
        FROM CodeFirstDatabase.IdentityUserLogin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.IdentityUser_Logins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUser_Logins
        [Demo.Data.IdentityUser_Logins](T3.[IdentityUser_Logins.IdentityUser_Logins_Source], T3.[IdentityUser_Logins.IdentityUser_Logins_Target])
    FROM (
        SELECT -- Constructing IdentityUser_Logins_Source
            CreateRef(DemoDataContext.IdentityUsers, row(T2.[IdentityUser_Logins.IdentityUser_Logins_Source.Id]), [Demo.Data.IdentityUser]) AS [IdentityUser_Logins.IdentityUser_Logins_Source], 
            T2.[IdentityUser_Logins.IdentityUser_Logins_Target]
        FROM (
            SELECT -- Constructing IdentityUser_Logins_Target
                T1.[IdentityUser_Logins.IdentityUser_Logins_Source.Id], 
                CreateRef(DemoDataContext.IdentityUserLogins, row(T1.[IdentityUser_Logins.IdentityUser_Logins_Target.UserId]), [Demo.Data.IdentityUserLogin]) AS [IdentityUser_Logins.IdentityUser_Logins_Target]
            FROM (
                SELECT 
                    T.IdentityUser_Id AS [IdentityUser_Logins.IdentityUser_Logins_Source.Id], 
                    T.UserId AS [IdentityUser_Logins.IdentityUser_Logins_Target.UserId], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserLogin AS T
                WHERE T.IdentityUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.IdentityUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRoles
        [Demo.Data.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId) WITH 
        RELATIONSHIP(CREATEREF(DemoDataContext.IdentityUsers, ROW(T1.[IdentityUser_Roles.IdentityUser_Roles_Source.Id]),[Demo.Data.IdentityUser]),[Demo.Data.IdentityUser_Roles],IdentityUser_Roles_Target,IdentityUser_Roles_Source) 
        RELATIONSHIP(CREATEREF(DemoDataContext.IdentityRoles, ROW(T1.[IdentityRole_Users.IdentityRole_Users_Source.Id]),[Demo.Data.IdentityRole]),[Demo.Data.IdentityRole_Users],IdentityRole_Users_Target,IdentityRole_Users_Source) 
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0, 
            T.IdentityUser_Id AS [IdentityUser_Roles.IdentityUser_Roles_Source.Id], 
            T.IdentityRole_Id AS [IdentityRole_Users.IdentityRole_Users_Source.Id]
        FROM CodeFirstDatabase.IdentityUserRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.IdentityUser_Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUser_Roles
        [Demo.Data.IdentityUser_Roles](T3.[IdentityUser_Roles.IdentityUser_Roles_Source], T3.[IdentityUser_Roles.IdentityUser_Roles_Target])
    FROM (
        SELECT -- Constructing IdentityUser_Roles_Source
            CreateRef(DemoDataContext.IdentityUsers, row(T2.[IdentityUser_Roles.IdentityUser_Roles_Source.Id]), [Demo.Data.IdentityUser]) AS [IdentityUser_Roles.IdentityUser_Roles_Source], 
            T2.[IdentityUser_Roles.IdentityUser_Roles_Target]
        FROM (
            SELECT -- Constructing IdentityUser_Roles_Target
                T1.[IdentityUser_Roles.IdentityUser_Roles_Source.Id], 
                CreateRef(DemoDataContext.IdentityUserRoles, row(T1.[IdentityUser_Roles.IdentityUser_Roles_Target.UserId], T1.[IdentityUser_Roles.IdentityUser_Roles_Target.RoleId]), [Demo.Data.IdentityUserRole]) AS [IdentityUser_Roles.IdentityUser_Roles_Target]
            FROM (
                SELECT 
                    T.IdentityUser_Id AS [IdentityUser_Roles.IdentityUser_Roles_Source.Id], 
                    T.UserId AS [IdentityUser_Roles.IdentityUser_Roles_Target.UserId], 
                    T.RoleId AS [IdentityUser_Roles.IdentityUser_Roles_Target.RoleId], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserRole AS T
                WHERE T.IdentityUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.IdentityRole_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRole_Users
        [Demo.Data.IdentityRole_Users](T3.[IdentityRole_Users.IdentityRole_Users_Source], T3.[IdentityRole_Users.IdentityRole_Users_Target])
    FROM (
        SELECT -- Constructing IdentityRole_Users_Source
            CreateRef(DemoDataContext.IdentityRoles, row(T2.[IdentityRole_Users.IdentityRole_Users_Source.Id]), [Demo.Data.IdentityRole]) AS [IdentityRole_Users.IdentityRole_Users_Source], 
            T2.[IdentityRole_Users.IdentityRole_Users_Target]
        FROM (
            SELECT -- Constructing IdentityRole_Users_Target
                T1.[IdentityRole_Users.IdentityRole_Users_Source.Id], 
                CreateRef(DemoDataContext.IdentityUserRoles, row(T1.[IdentityRole_Users.IdentityRole_Users_Target.UserId], T1.[IdentityRole_Users.IdentityRole_Users_Target.RoleId]), [Demo.Data.IdentityUserRole]) AS [IdentityRole_Users.IdentityRole_Users_Target]
            FROM (
                SELECT 
                    T.IdentityRole_Id AS [IdentityRole_Users.IdentityRole_Users_Source.Id], 
                    T.UserId AS [IdentityRole_Users.IdentityRole_Users_Target.UserId], 
                    T.RoleId AS [IdentityRole_Users.IdentityRole_Users_Target.RoleId], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserRole AS T
                WHERE T.IdentityRole_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DemoDataContext.IdentityRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRoles
        [Demo.Data.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityRole AS T
    ) AS T1");
        }
    }
}
